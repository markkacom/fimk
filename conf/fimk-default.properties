#####################################################################################
# The MIT License (MIT)                                                             #
# Copyright (c) 2016 Krypto Fin ry and the FIMK Developers                          #
# Permission is hereby granted, free of charge, to any person obtaining a copy of   #
# this software and associated documentation files (the "Software"), to deal in     #
# the Software without restriction, including without limitation the rights to      #
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of  #
# the Software, and to permit persons to whom the Software is furnished to do so,   #
# subject to the following conditions:                                              #
# The above copyright notice and this permission notice shall be included in all    #
# copies or substantial portions of the Software.                                   #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,          #
#                                                                                   #
#####################################################################################

# Do not modify this file. Instead, create a fimk.properties file with only the
# properties you need to change, and set them there. The values in 
# fimk.properties override those in fimk-default.properties.


#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
fimk.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
fimk.peerServerPort=7884

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and
# IPv6 interfaces
fimk.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from fimk.peerServerPort (useful if you do port
# forwarding behind a router).
fimk.myAddress=

# My platform, to be announced to peers.
fimk.myPlatform=PC

# My hallmark, if available.
fimk.myHallmark=

# Default initial peers. Only used if fimk.usePeersDb=true.
# Do not modify. Add custom peers to fimk.wellKnownPeers instead.
fimk.defaultPeers=178.63.65.224; 178.63.0.72; 144.76.3.50;

# A list of well known peer addresses / host names, separated by '; '.
fimk.wellKnownPeers=

# Known bad peers to be blacklisted
fimk.knownBlacklistedPeers=

# Known peers to be whitelisted
fimk.knownWhitelistedPeers=

# Default initial peers used for testnet only. Only used if fimk.usePeersDb=true.
# Do not modify. Add custom testnet peers to fimk.testnetPeers instead.
fimk.defaultTestnetPeers=188.166.0.145;
# Peers used for testnet only.
fimk.testnetPeers=

# Maximum number of inbound connections
fimk.maxNumberOfInboundConnections=250

# Maximum number of outbound connections
fimk.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
fimk.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
fimk.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
fimk.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
fimk.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
fimk.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
fimk.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer
fimk.useWebSockets=true

# WebSocket connection idle timeout (milliseconds)
fimk.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
fimk.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
fimk.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
fimk.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
fimk.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
fimk.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
fimk.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
fimk.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6884 (peer networking), 6885 (UI) and 6886 (API) will
# be used.
fimk.isTestnet=false

# Save known peers in the database
fimk.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
fimk.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
fimk.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# fimk.shareMyAddress=false, fimk.wellKnownPeers=, fimk.testnetPeers= 
# and fimk.usePeersDb=false, and if set to true overrides those properties.
fimk.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
fimk.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
fimk.cjdnsOnly=false

#### API SERVER ####

# Accept http/json API requests.
fimk.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
#fimk.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];
fimk.allowedBotHosts=*

# Port for http/json API requests.
fimk.apiServerPort=7886

# Port for https/json API request. If same as fimk.apiServerPort, the fimk.apiSSL
# setting determines whether SSL is used or not.
fimk.apiServerSSLPort=7886

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces.
fimk.apiServerHost=0.0.0.0

# Idle timeout for http/json API request connections, milliseconds.
fimk.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
fimk.apiResourceBase=html/fimk

# Default page for the API server.
fimk.apiWelcomeFile=index.html

# Java API documentation directory, optional.
fimk.javadocResourceBase=html/doc

# Enable Cross Origin Filter for the API server.
fimk.apiServerCORS=true

# Enable SSL for the API server (also need to set fimk.keyStorePath and
# fimk.keyStorePassword).
# Non-SSL connections will be disabled if fimk.apiServerSSLPort is equal to
# fimk.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
fimk.apiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
fimk.apiServerEnforcePOST=true

# Compress Http responses for the API server.
fimk.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# fimk.apiServerHost=127.0.0.1.
fimk.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
fimk.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
fimk.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
fimk.apiEventTimeout=300

# Maximum number of applications with active event registrations.
fimk.apiMaxEventUsers=32

#### WEBSOCKET SERVER ####

# The WEBSOCKET server copies the config for the API server except for the few
# specific settings required.

# Accept websocket/json API requests.
fimk.enableWebsockets=true

# Port for websocket/json API requests.
fimk.websocketServerPort=7986

# Host interface on which to listen for websocket/json API request, default localhost only.
# Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces.
fimk.websocketServerHost=0.0.0.0

#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
fimk.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to
# allow all.
fimk.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
fimk.uiServerPort=7885

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
fimk.uiServerHost=127.0.0.1

# Idle timeout for NRS user interface server, milliseconds.
fimk.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
fimk.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
fimk.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set fimk.keyStorePath and
# fimk.keyStorePassword).
fimk.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
fimk.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#fimk.log=fim.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#fimk.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
fimk.enableLogTraceback=false

# Enable logging of exception stack traces.
fimk.enableStackTraces=true

# Enable logging of Jetty messages.
#fimk.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
# 1=exceptions, 2=non 200 response, 4=200 response
fimk.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
fimk.debugTraceAccounts=

# File name for logging tracked account balances.
fimk.debugTraceLog=fim-trace.csv

# Separator character for trace log.
fimk.debugTraceSeparator=\t

# Quote character for trace log.
fimk.debugTraceQuote="

# Log changes to unconfirmed balances.
fimk.debugLogUnconfirmed=false

# Override the database version
# fimk.debugOverrideDbVersion=

#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The fimk_db folder is expected to be in the current working directory, will be
# created if missing.
fimk.dbUrl=jdbc:h2:./fim_db/fim;DB_CLOSE_ON_EXIT=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true
fimk.testDbUrl=jdbc:h2:./fim_test_db/fim;DB_CLOSE_ON_EXIT=FALSE

fimk.dbType=h2
fimk.testDbType=h2

fimk.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE
fimk.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

fimk.dbUsername=sa
fimk.testDbUsername=sa

fimk.dbPassword=sa
fimk.testDbPassword=sa

# Database connection timeout in seconds.
fimk.dbLoginTimeout=70

# Database default lock timeout in seconds.
fimk.dbDefaultLockTimeout=60

# Maximum simultaneous database connections.
fimk.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
fimk.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
fimk.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
fimk.maxRollback=800

# When trimming is enabled, it is run every fimk.trimFrequency blocks.
fimk.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet.
fimk.maxPrunableLifetime=0

# Always include prunable parts in transaction json, as long as still available,
# even if expired.
fimk.includeExpiredPrunable=false

# Threshold for logging database statements (milliseconds)
fimk.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds)
fimk.transactionLogThreshold=15000

# Log the average transaction time after this many minutes
fimk.transactionLogInterval=15


#### Blocks and transactions ####

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
fimk.forgingSpeedup=3

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
fimk.numberOfForkConfirmations=1
fimk.testnetNumberOfForkConfirmations=0

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
fimk.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
fimk.maxUnconfirmedTransactions=2000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
fimk.processPolls=true



#### MINT ####

# Address of the FIMK server to which the mint worker submits its transactions
# (default: localhost).
fimk.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
fimk.mint.useHttps=false

# Specify a mintable currency code.
fimk.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by fimk.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
fimk.mint.secretPhrase=

# Number of units to mint per transaction
# The minting difficulty grows linearly with the number of units per mint.
fimk.mint.unitsPerMint=1

# The initial nonce used for minting
# Set to 0 to start with a random nonce.
fimk.mint.initialNonce=0

# Number of concurrency threads used for minting
# Set to 0 allocate one thread per processor core.
fimk.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
fimk.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response
fimk.mint.stopOnError=false

#### FIMK Specific ####

# For public nodes, only allow these accounts to forge
# Values can be a ; delimited list of accounts, an empty value (for no forging
# allowed) or a * to allow all accounts to forge. 
fimk.allowedToForge=*

# Enable the gossip protocol
fimk.gossipEnabled=true

# Shutdown FIMK server when this version becomes OUTDATED.
# Running an OUTDATED version means you will not be able to accept blocks
# and transaction from users on newer versions. You are guaranteed to land
# on a fork which means the blocks you forge will become invalid and you will 
# not receive any updates of account balances on the rest of the network.
# Version information is ditributed over the blockchain and is controlled by
# the makers of FIMK - Krypto Fin ry.
fimk.shutdownWhenOutdated=true

# Issues a warning when a newer version is available. The warning is printed to 
# the console logs.
fimk.warnNotLatestVersion=true

# Interval in seconds when the blockchain is consulted if a new version has been 
# released. Applies only when fimk.shutdownWhenOutdated=true or 
# fimk.warnNotLatestVersion=true. Default is once every 10 minutes.
fimk.newVersionCheckInterval=600  

#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
fimk.peerServerDoSFilter.maxRequestsPerSec=30
fimk.peerServerDoSFilter.delayMs=1000
fimk.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
fimk.keyStorePath=keystore
fimk.keyStorePassword=password

## POP Reward client node
fimk.popReward.nodeToken=
## POP Reward awarding node (who send rewards)
fimk.popReward.nodesRewardingEnabled=
fimk.popReward.registrationAccount=

#### Developers only ####

# Force re-validation of blocks and transaction at start.
fimk.forceValidate=false

# Force re-build of derived objects tables at start.
fimk.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# fimk.timeMultiplier=1

# FIMK version
fimk.version=0.8.0-rc2
